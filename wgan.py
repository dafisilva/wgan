# -*- coding: utf-8 -*-
"""WGAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x7vZGh_jj1xEoaoloWYjm8GUYZIMkaHr

# Imports
"""

import numpy as np
import torch
import torch.nn as nn
import torchvision.models
from torch.utils.data import Dataset,DataLoader
import pandas as pd
import torchvision.transforms as transforms
from sklearn.model_selection import train_test_split
from tqdm import tqdm
from PIL import Image
import copy
import os
import matplotlib.pyplot as plt
import torchvision.datasets
import gc
import random
import torchvision.utils as vutils

"""# Data"""

transform=transforms.Compose([transforms.Resize((64,64)),transforms.ToTensor()])
trainset=torchvision.datasets.CelebA('celeba',split='train',download=True,transform=transform)
trainloader=DataLoader(trainset,batch_size=64,shuffle=True)
print('DATA LOADED SUCCESSFULLY')

"""# Model"""

class Discriminator(nn.Module):
    def __init__(self, channels_img, features_d):
        super(Discriminator, self).__init__()
        self.disc = nn.Sequential(
            # input: N x channels_img x 64 x 64
            nn.Conv2d(channels_img, features_d, kernel_size=4, stride=2, padding=1),
            nn.LeakyReLU(0.2),
            # _block(in_channels, out_channels, kernel_size, stride, padding)
            self._block(features_d, features_d * 2, 4, 2, 1),
            self._block(features_d * 2, features_d * 4, 4, 2, 1),
            self._block(features_d * 4, features_d * 8, 4, 2, 1),
            # After all _block img output is 4x4 (Conv2d below makes into 1x1)
            nn.Conv2d(features_d * 8, 1, kernel_size=4, stride=2, padding=0),
        )

    def _block(self, in_channels, out_channels, kernel_size, stride, padding):
        return nn.Sequential(
            nn.Conv2d(
                in_channels,
                out_channels,
                kernel_size,
                stride,
                padding,
                bias=False,
            ),
            nn.InstanceNorm2d(out_channels, affine=True),
            nn.LeakyReLU(0.2),
        )

    def forward(self, x):
        return self.disc(x)


class Generator(nn.Module):
    def __init__(self, channels_noise, channels_img, features_g):
        super(Generator, self).__init__()
        self.net = nn.Sequential(
            # Input: N x channels_noise x 1 x 1
            self._block(channels_noise, features_g * 16, 4, 1, 0),  # img: 4x4
            self._block(features_g * 16, features_g * 8, 4, 2, 1),  # img: 8x8
            self._block(features_g * 8, features_g * 4, 4, 2, 1),  # img: 16x16
            self._block(features_g * 4, features_g * 2, 4, 2, 1),  # img: 32x32
            nn.ConvTranspose2d(
                features_g * 2, channels_img, kernel_size=4, stride=2, padding=1
            ),
            # Output: N x channels_img x 64 x 64
            nn.Tanh(),
        )

    def _block(self, in_channels, out_channels, kernel_size, stride, padding):
        return nn.Sequential(
            nn.ConvTranspose2d(
                in_channels,
                out_channels,
                kernel_size,
                stride,
                padding,
                bias=False,
            ),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(),
        )

    def forward(self, x):
        return self.net(x)


def initialize_weights(model):
    # Initializes weights according to the DCGAN paper
    for m in model.modules():
        if isinstance(m, (nn.Conv2d, nn.ConvTranspose2d, nn.BatchNorm2d)):
            nn.init.normal_(m.weight.data, 0.0, 0.02)

"""# Gradient Penalty"""

def gradient_penalty(critic, real, fake, device="cuda"):
    BATCH_SIZE, C, H, W = real.shape
    alpha = torch.rand((BATCH_SIZE, 1, 1, 1)).repeat(1, C, H, W).to(device)
    interpolated_images = real * alpha + fake * (1 - alpha)

    # Calculate critic scores
    mixed_scores = critic(interpolated_images)

    # Take the gradient of the scores with respect to the images
    gradient = torch.autograd.grad(
        inputs=interpolated_images,
        outputs=mixed_scores,
        grad_outputs=torch.ones_like(mixed_scores),
        create_graph=True,
        retain_graph=True,
    )[0]
    gradient = gradient.view(gradient.shape[0], -1)
    gradient_norm = gradient.norm(2, dim=1)
    gradient_penalty = torch.mean((gradient_norm - 1) ** 2)
    return gradient_penalty

"""# Hyperparameters"""

# Hyperparameters etc.
device = "cuda" if torch.cuda.is_available() else "cpu"

LEARNING_RATE = 0.00005
BATCH_SIZE = 64
IMAGE_SIZE = 64
CHANNELS_IMG = 3
Z_DIM = 100
NUM_EPOCHS = 200
FEATURES_CRITIC = 16
FEATURES_GEN = 16
CRITIC_ITERATIONS = 5
LAMBDA_GP = 10


torch.manual_seed(0)
np.random.seed(0)

"""# Training Loop"""

gen = Generator(Z_DIM, CHANNELS_IMG, FEATURES_GEN).to(device)
critic = Discriminator(CHANNELS_IMG, FEATURES_CRITIC).to(device)
initialize_weights(gen)
initialize_weights(critic)
save_path='results'
# initializate optimizer
opt_gen =torch.optim.RMSprop(gen.parameters(), lr=LEARNING_RATE)
opt_critic = torch.optim.RMSprop(critic.parameters(), lr=LEARNING_RATE)

fixed_noise = torch.randn(32, Z_DIM, 1, 1).to(device)

G_losses=[]
D_losses=[]

print('\n Instance is running on: ',device)
print('EPOCHS:',NUM_EPOCHS)

for epoch in range(NUM_EPOCHS):
    print(f'EPOCH {epoch+1}/{NUM_EPOCHS}')
    loss_critic_save=0
    loss_gen_save=0

    for batch_idx, (real, _) in enumerate(tqdm(trainloader)):
        real = real.to(device)
        cur_batch_size = real.shape[0]

        # Train Critic: max E[critic(real)] - E[critic(fake)]
        # equivalent to minimizing the negative of that
        for _ in range(CRITIC_ITERATIONS):
            noise = torch.randn(cur_batch_size, Z_DIM, 1, 1).to(device)
            fake = gen(noise)
            critic_real = critic(real).reshape(-1)
            critic_fake = critic(fake).reshape(-1)
            gp = gradient_penalty(critic, real, fake, device=device)
            loss_critic = (
                -(torch.mean(critic_real) - torch.mean(critic_fake)) + LAMBDA_GP * gp
            )
            critic.zero_grad()
            loss_critic.backward(retain_graph=True)
            opt_critic.step()
            loss_critic_save+=loss_critic.item()/CRITIC_ITERATIONS

        # Train Generator: max E[critic(gen_fake)] <-> min -E[critic(gen_fake)]
        gen_fake = critic(fake).reshape(-1)
        loss_gen = -torch.mean(gen_fake)
        gen.zero_grad()
        loss_gen.backward()
        opt_gen.step()
        loss_gen_save+=loss_gen.item()/CRITIC_ITERATIONS



    loss_gen_save=loss_gen_save/len(trainloader)
    loss_critic_save=loss_critic_save/len(trainloader)
        
        
    G_losses.append(loss_gen_save)
    D_losses.append(loss_critic_save)
        
    print(f'D_loss:{loss_critic_save}\nG_loss:{loss_gen_save}')
      
    np.save(os.path.join(save_path,'G_loss'),G_losses)
    np.save(os.path.join(save_path,'D_loss'),D_losses)
    torch.save(critic.state_dict(),os.path.join(save_path,'discriminator.pth'))
    torch.save(gen.state_dict(),os.path.join(save_path,'generator.pth'))


    gc.collect
    fixed_out=gen(fixed_noise)
    grid=vutils.make_grid(fixed_out,padding=2,normalize=True)

    fig = plt.figure(figsize=(8,8))
    plt.axis("off")

    plt.imshow(np.transpose(grid.detach().cpu().numpy(),(1,2,0)))

    plt.savefig(os.path.join('results/progress_img','epoch'+str(epoch)+'.jpg'))